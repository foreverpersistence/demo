package com.learning.fred.example.id.v1;

import com.google.common.annotations.VisibleForTesting;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

/**
 * Id Generator that is used to generate random IDs.
 *
 *<p>
 *  The IDs generated by this class are not absolutely unique,
 *  but the probability of duplication is very low.
 * @author fred
 * @date 2020/11/30 10:00
 * @description v1
 */
public class RandomIdGenerator implements LogTraceIdGenerator {

    private static final Logger LOGGER = LoggerFactory.getLogger(RandomIdGenerator.class);

    /**
     *  注释：做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输 入、输出、异常进行说明。
     *
     * @return
     */
    @Override
    public String generate() {
        String substrOfHostName = getLastfieldOfHostName();
        long currentTimeMillis = System.currentTimeMillis();
        String randomString = generateRandomAlphameric(8);
        String id = String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
        return id;
    }

    private String getLastfieldOfHostName() {
        String substrOfHostName = null;
        try {
            String hostName = InetAddress.getLocalHost().getHostName();

            // 重构点
            substrOfHostName = getLastSubSplitByDot(hostName);
            return substrOfHostName;
        } catch (UnknownHostException e) {
            LOGGER.warn("Failed to get the host name.", e);
        }
        return substrOfHostName;
    }

    @VisibleForTesting
    protected String getLastSubSplitByDot(String hostName) {

        String[] tokens = hostName.split("\\.");
        String substrOfHostName = tokens[tokens.length - 1];
        return substrOfHostName;
    }

    @VisibleForTesting
    protected String generateRandomAlphameric(int length) {
        char[] randomChars = new char[length];
        int count = 0;
        Random random = new Random();
        while (count < length) {
            int maxAscii = 'z';
            int randomAscii = random.nextInt(maxAscii);
            boolean isDigit= randomAscii >= '0' && randomAscii <= '9';
            boolean isUppercase= randomAscii >= 'A' && randomAscii <= 'Z';
            boolean isLowercase= randomAscii >= 'a' && randomAscii <= 'z';
            if (isDigit|| isUppercase || isLowercase) {
                randomChars[count] = (char) (randomAscii);
                ++count;
            }
        }
        return new String(randomChars);
    }


    public static void main(String[] args) {
//        LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();
    }
}
